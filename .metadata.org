#+EXPORT_FILE_NAME: README.md
#+OPTIONS: toc:1 |:t ^:nil tags:nil

# Place warning at the top of the exported file
#+BEGIN_EXAMPLE
<!-- This file is generated automatically from .metadata.org -->
<!-- File edits may be overwritten! -->
#+END_EXAMPLE

* Project Specific Variables                                       :noexport:

#+NAME: name
#+BEGIN_SRC text :exports none :noweb yes
loadstar_sensors_interface
#+END_SRC

#+NAME: repository-name
#+BEGIN_SRC text :exports none :noweb yes
loadstar_sensors_interface_python
#+END_SRC

#+NAME: guix-name
#+BEGIN_SRC text :exports none :noweb yes
python-loadstar-sensors-interface
#+END_SRC

#+NAME: version
#+BEGIN_SRC text :exports none :noweb yes
0.10.0
#+END_SRC

#+NAME: description
#+BEGIN_SRC text :exports none :noweb yes
Python interface to Loadstar Sensors USB devices.
#+END_SRC

#+NAME: python-dependencies
#+BEGIN_SRC text :exports none :noweb yes
pyserial
click
#+END_SRC

#+NAME: guix-dependencies
#+BEGIN_SRC text :exports none :noweb yes
python-pyserial
python-click
#+END_SRC

#+NAME: command-line-interface
#+BEGIN_SRC text :exports none :noweb yes
loadstar
#+END_SRC

#+NAME: references
#+BEGIN_SRC text :exports none :noweb yes
https://www.loadstarsensors.com/
https://www.loadstarsensors.com/di-100u-di-1000u-command-set.html
#+END_SRC

#+NAME: creation-date
#+BEGIN_SRC text :exports none :noweb yes
2022-08-16
#+END_SRC

* General and Derived Variables                                    :noexport:

#+NAME: release-month-day
#+BEGIN_SRC emacs-lisp :exports none :noweb yes
(format-time-string "%m-%d")
#+END_SRC

#+NAME: release-year
#+BEGIN_SRC emacs-lisp :exports none :noweb ye
(format-time-string "%Y")
#+END_SRC

#+NAME: release-date
#+BEGIN_SRC text :exports none :noweb yes
<<release-year()>>-<<release-month-day()>>
#+END_SRC

#+NAME: license
#+BEGIN_SRC text :exports none :noweb yes
BSD-3-Clause
#+END_SRC

#+NAME: guix-license
#+BEGIN_SRC text :exports none :noweb yes
license:bsd-3
#+END_SRC

#+NAME: license-files
#+BEGIN_SRC text :exports none :noweb yes
LICENSE
#+END_SRC

#+NAME: repository-organization
#+BEGIN_SRC text :exports none :noweb yes
janelia-pypi
#+END_SRC

#+NAME: forge
#+BEGIN_SRC text :exports none :noweb yes
github.com
#+END_SRC

#+NAME: repository-url
#+BEGIN_SRC text :exports none :noweb yes
https://<<forge>>/<<repository-organization>>/<<repository-name>>
#+END_SRC

#+NAME: code-repository
#+BEGIN_SRC text :exports none :noweb yes
git+<<repository-url>>.git
#+END_SRC

#+NAME: author-given-name
#+BEGIN_SRC text :exports none :noweb yes
Peter
#+END_SRC

#+NAME: author-family-name
#+BEGIN_SRC text :exports none :noweb yes
Polidoro
#+END_SRC

#+NAME: author
#+BEGIN_SRC text :exports none :noweb yes
<<author-given-name>> <<author-family-name>>
#+END_SRC

#+NAME: email
#+BEGIN_SRC text :exports none :noweb yes
peter@polidoro.io
#+END_SRC

#+NAME: affiliation
#+BEGIN_SRC text :exports none :noweb yes
Howard Hughes Medical Institute
#+END_SRC

#+NAME: copyright
#+BEGIN_SRC text :exports none :noweb yes
<<release-year()>> <<affiliation>>
#+END_SRC

#+NAME: programming-language
#+BEGIN_SRC text :exports none :noweb yes
Python 3
#+END_SRC

* About

#+BEGIN_SRC markdown :noweb yes
- Name: <<name>>
- Description: <<description>>
- Version: <<version>>
- Release Date: <<release-date>>
- Creation Date: <<creation-date>>
- License: <<license>>
- URL: <<repository-url>>
- Author: <<author>>
- Email: <<email>>
- Copyright: <<copyright>>
- References:
  - <<references>>
- Dependencies:
  - <<python-dependencies>>
#+END_SRC

* Example Usage

** Python

#+BEGIN_SRC python
from loadstar_sensors_interface import LoadstarSensorsInterface
dev = LoadstarSensorsInterface(port='/dev/ttyUSB0') # GNU/Linux specific port
dev = LoadstarSensorsInterface(port='/dev/tty.usbmodem262471') # Mac OS X specific port
dev = LoadstarSensorsInterface(port='COM3') # Windows specific port

device_info = dev.get_device_info()
dev.tare()
sensor_value = dev.get_sensor_value()
sensor_values = dev.get_sensor_values_for_duration(4)

dev.set_averaging_window_in_samples(5) # 1-1024 samples
averaging_window = dev.get_averaging_window_in_samples()
dev.set_averaging_threshold_in_percent(25) # 1-100 percent
averaging_threshold = dev.get_averaging_threshold_in_percent()
#+END_SRC

** Command Line

#+BEGIN_SRC sh :noweb yes
<<command-line-interface>> --help
# Usage: <<command-line-interface>> [OPTIONS]

#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :noweb yes
<<command-line-interface>> --info

#+END_SRC

#+BEGIN_SRC sh :noweb yes
<<command-line-interface>> -p /dev/ttyUSB0 --tare -s LB_TO_GM -w 1 -t 25 -f 2 -d 10

#+END_SRC

* Installation

[[https://github.com/janelia-pypi/python_setup]]

** GNU/Linux

*** Drivers

GNU/Linux computers usually have all of the necessary drivers already installed,
but users need the appropriate permissions to open the device and communicate
with it.

Udev is the GNU/Linux subsystem that detects when things are plugged into your
computer.

Udev may be used to detect when a loadstar sensor is plugged into the computer
and automatically give permission to open that device.

If you plug a sensor into your computer and attempt to open it and get an error
such as: "FATAL: cannot open /dev/ttyUSB0: Permission denied", then you need to
install udev rules to give permission to open that device.

Udev rules may be downloaded as a file and placed in the appropriate directory
using these instructions:

[[https://docs.platformio.org/en/stable/core/installation/udev-rules.html][99-platformio-udev.rules]]

**** Download rules into the correct directory

#+BEGIN_SRC sh :noweb yes
curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core/master/scripts/99-platformio-udev.rules | sudo tee /etc/udev/rules.d/99-platformio-udev.rules
#+END_SRC

**** Restart udev management tool

#+BEGIN_SRC sh :noweb yes
sudo service udev restart
#+END_SRC

**** Ubuntu/Debian users may need to add own “username” to the “dialout” group

#+BEGIN_SRC sh :noweb yes
sudo usermod -a -G dialout $USER
sudo usermod -a -G plugdev $USER
#+END_SRC

**** After setting up rules and groups

You will need to log out and log back in again (or reboot) for the user group changes to take effect.

After this file is installed, physically unplug and reconnect your board.

*** Python Code

The Python code in this library may be installed in any number of ways, chose one.

**** pip

#+BEGIN_SRC sh :noweb yes
python3 -m venv ~/venvs/<<name>>
source ~/venvs/<<name>>/bin/activate
pip install <<name>>
#+END_SRC

**** guix

Setup guix-janelia channel:

https://github.com/guix-janelia/guix-janelia

#+BEGIN_SRC sh :noweb yes
guix install <<guix-name>>
#+END_SRC

** Windows

*** Drivers

Download and install Windows driver:

[[https://www.loadstarsensors.com/drivers-for-usb-load-cells-and-load-cell-interfaces.html][Loadstar Sensors Windows Driver]]

*** Python Code

The Python code in this library may be installed in any number of ways, chose one.

**** pip

#+BEGIN_SRC sh :noweb yes
python3 -m venv C:\venvs\<<name>>
C:\venvs\<<name>>\Scripts\activate
pip install <<name>>
#+END_SRC

* Development

** Install Guix

[[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html][Install Guix]]

** Clone Repository

#+BEGIN_SRC sh :noweb yes
git clone <<repository-url>>
cd <<repository-name>>
#+END_SRC

** Edit .metadata.org

#+BEGIN_SRC sh :noweb yes
make metadata-edits
#+END_SRC

** Tangle .metadata.org

#+BEGIN_SRC sh :noweb yes
make metadata
#+END_SRC

** Test Python package using ipython shell

#+BEGIN_SRC sh :noweb yes
make ipython-shell # PORT=/dev/ttyUSB0
# make PORT=/dev/ttyUSB1 ipython-shell
import <<name>>
exit
#+END_SRC

** Test installation of Guix package

#+BEGIN_SRC sh :noweb yes
make installed-shell # PORT=/dev/ttyUSB0
# make PORT=/dev/ttyUSB1 installed-shell
exit
#+END_SRC

** Upload Python package to pypi

#+BEGIN_SRC sh :noweb yes
make upload
#+END_SRC

** Test direct device interaction using serial terminal

#+BEGIN_SRC sh :noweb yes
make serial-shell # PORT=/dev/ttyUSB0
# make PORT=/dev/ttyUSB1 serial-shell
? # help
settings
[C-a][C-x] # to exit
#+END_SRC

* Tangled Files                                                    :noexport:

#+BEGIN_SRC text :tangle AUTHORS :exports none :noweb yes
<<author>>
#+END_SRC

#+BEGIN_SRC js :tangle codemeta.json :exports none :noweb yes
{
    "@context": "https://doi.org/10.5063/schema/codemeta-2.0",
    "@type": "SoftwareSourceCode",
    "license": "https://spdx.org/licenses/<<license>>",
    "codeRepository": "<<code-repository>>",
    "dateCreated": "<<creation-date>>",
    "dateModified": "<<release-date>>",
    "name": "<<name>>",
    "version": "<<version>>",
    "description": "<<description>>",
    "programmingLanguage": [
        "<<programming-language>>"
    ],
    "author": [
        {
            "@type": "Person",
            "givenName": "<<author-given-name>>",
            "familyName": "<<author-family-name>>",
            "email": "<<email>>",
            "affiliation": {
                "@type": "Organization",
                "name": "<<affiliation>>"
            }
        }
    ]
}
#+END_SRC

#+BEGIN_SRC scheme :tangle .channels.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "c1d543203e6de2ca31da82097f23b31a4250315e")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

#+BEGIN_SRC scheme :tangle .guix.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(use-modules
 (guix packages)
 (guix git-download)
 (guix gexp)
 ((guix licenses) #:prefix license:)
 (guix build-system python)
 (gnu packages base)
 (gnu packages emacs)
 (gnu packages emacs-xyz)
 (gnu packages python-build)
 (gnu packages python-xyz)
 (gnu packages version-control)
 (gnu packages ncurses))

(define %source-dir (dirname (current-filename)))

(define-public python-dev-package
  (package
    (name "python-dev-package")
    (version "dev")
    (source (local-file %source-dir
                        #:recursive? #t
                        #:select? (git-predicate %source-dir)))
    (build-system python-build-system)
    (native-inputs (list gnu-make
                         git
                         emacs
                         emacs-org
                         emacs-ox-gfm
                         python-wheel
                         python-twine
                         python-ipython))
    (propagated-inputs (list
                        ncurses
                        <<guix-dependencies>>))
    (home-page "")
    (synopsis "")
    (description "")
    (license <<guix-license>>)))

python-dev-package
#+END_SRC

#+BEGIN_SRC text :tangle Makefile :exports none :noweb yes
# This file is generated automatically from .metadata.org
# File edits may be overwritten!

.PHONY: upload
upload: metadata package twine add clean

GUIX-SHELL = guix time-machine -C .channels.scm -- shell
GUIX-CONTAINER = $(GUIX-SHELL) --container
PORT = /dev/ttyUSB0
GUIX-CONTAINER-PORT = $(GUIX-CONTAINER) --expose=$(PORT)
DEVELOPMENT = -D -f .guix.scm
GUIX-CONTAINER-DEVELOPMENT = $(GUIX-CONTAINER) $(DEVELOPMENT)
GUIX-CONTAINER-GUI = $(GUIXCONTAINER-DEVELOPMENT) --preserve='^DISPLAY$$' --preserve='^TERM$$'

.PHONY: shell
shell:
	$(GUIX-SHELL)

.PHONY: container
container:
	$(GUIX-CONTAINER)

.PHONY: exposed-container
exposed-container:
	$(GUIX-CONTAINER-PORT)

.PHONY: dev-container
dev-container:
	$(GUIX-CONTAINER-PORT) $(DEVELOPMENT)

.PHONY: ipython-shell
ipython-shell:
	$(GUIX-CONTAINER-PORT) $(DEVELOPMENT) -- ipython

.PHONY: serial-shell
serial-shell:
	$(GUIX-CONTAINER-PORT) picocom -- picocom -b 9600 -f n -y n -d 8 -p 1 -c $(PORT)

.PHONY: installed-shell
installed-shell:
	$(GUIX-CONTAINER-PORT) -f .guix.scm --rebuild-cache

.PHONY: metadata-edits
metadata-edits:
	$(GUIX-CONTAINER-GUI) -- sh -c "emacs -q --no-site-file --no-site-lisp --no-splash -l .init.el --file .metadata.org"

.PHONY: metadata
metadata:
	$(GUIX-CONTAINER-DEVELOPMENT) -- sh -c "emacs --batch -Q  -l .init.el --eval '(process-org \".metadata.org\")'"

.PHONY: package
package:
	$(GUIX-CONTAINER-DEVELOPMENT) -- sh -c "python3 setup.py sdist bdist_wheel"

.PHONY: twine
twine:
	$(GUIX-CONTAINER-DEVELOPMENT) --network --expose=$$HOME/.pypirc -- sh -c "twine upload dist/*"

.PHONY: add
add:
	$(GUIX-CONTAINER-DEVELOPMENT) -- sh -c "git add --all"

.PHONY: clean
clean:
	$(GUIX-CONTAINER-DEVELOPMENT) -- sh -c "git clean -xdf"
#+END_SRC

#+BEGIN_SRC scheme :tangle .init.el :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(require 'org)

(eval-after-load "org"
  '(require 'ox-gfm nil t))

(setq make-backup-files nil)
(setq org-confirm-babel-evaluate nil)

(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)

(defun tangle-org (org-file)
  "Tangle org file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (org-babel-tangle-file org-file))

(defun export-org (org-file)
  "Export org file to gfm file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (let ((org-file-buffer (find-file-noselect org-file)))
    (with-current-buffer org-file-buffer
      (org-open-file (org-gfm-export-to-markdown)))))

(defun process-org (org-file)
  "Tangle and export org file"
  (progn (tangle-org org-file)
         (export-org org-file)))

#+END_SRC

#+BEGIN_SRC text :tangle pyproject.toml :exports none :noweb yes
# This file is generated automatically from .metadata.org
# File edits may be overwritten!
[build-system]
requires = ["setuptools"]
build-backed = "setuptools.build_meta"
#+END_SRC

#+BEGIN_SRC text :tangle setup.cfg :exports none :noweb yes
# This file is generated automatically from .metadata.org
# File edits may be overwritten!
[metadata]
name = <<name>>
version = <<version>>
author = <<author>>
author_email = <<email>>
url = <<repository-url>>
description = <<description>>
long_description = file: README.md
long_description_content_type = text/markdown
license = <<license>>
license_files = <<license-files>>
classifiers =
    Programming Language :: Python :: 3

[options]
packages = find:
install_requires =
    <<python-dependencies>>

[options.entry_points]
console_scripts =
    <<command-line-interface>> = <<name>>.cli:main
#+END_SRC

#+BEGIN_SRC python :tangle setup.py :exports none :noweb yes
"""<<description>>"""
# This file is generated automatically from .metadata.org
# File edits may be overwritten!
from setuptools import setup


if __name__ == '__main__':
    setup()
#+END_SRC

#+BEGIN_SRC python :tangle loadstar_sensors_interface/__about__.py :exports none :noweb yes
"""<<description>>"""
# This file is generated automatically from .metadata.org
# File edits may be overwritten!

__version__ = '<<version>>'
__description__ = '<<description>>'
__license__ = '<<license>>'
__url__ = '<<repository-url>>'
__author__ = '<<author>>'
__email__ = '<<email>>'
__copyright__ = '<<copyright>>'
#+END_SRC

#+BEGIN_SRC python :tangle loadstar_sensors_interface/__init__.py :exports none :noweb yes
"""<<description>>"""
# This file is generated automatically from .metadata.org
# File edits may be overwritten!
from <<name>>.__about__ import (
    __author__,
    __copyright__,
    __email__,
    __license__,
    __description__,
    __url__,
    __version__)

from .<<name>> import LoadstarSensorsInterface
#+END_SRC

#+BEGIN_SRC text :tangle LICENSE :exports none :noweb yes
Janelia Open-Source Software (3-clause BSD License)

Copyright <<copyright>>

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+END_SRC
